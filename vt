#!/usr/bin/env python2

import sys
import os
import subprocess
import collections

#               alias       real              virsh             host   port
#alias_list = [('hm2'     , 'hm2'           , None            , 'hm2', '22'),
#              ('vdebqa64', 'hm2-0-vdebqa64', 'hm2-0-vdebqa64', 'hm2', '22'),]

try:
    import vt_secret
    alias_list = vt_secret.alias_list
except ImportError:
    pass

class Alias:
    class _auto_dict(dict):
        def __getitem__(self, key):
            try:
                return dict.__getitem__(self, key)
            except KeyError:
                value = self[key] = type(self)()
                return value

    def __init__(self, a_list):
        self.alias = self._auto_dict()
        for a in a_list:
            self.alias[a[0]]['real']  = a[1]
            self.alias[a[0]]['virsh'] = a[2]
            self.alias[a[0]]['host']  = a[3]
            self.alias[a[0]]['port']  = a[4]

    def __getitem__(self, key):
        item = self.alias[key]
        if item == {}:
            del self.alias[key]
            raise KeyError
        return item

    def keys(self):
        return self.alias.keys()

def ls_host(host, port, user):
    subprocess.call(['virsh', '-c', 'qemu+ssh://' + user + '@' + host + ':' + port + '/system', 'list --all'])

def go_host(host, port, user):
    subprocess.call(['virsh', '-c', 'qemu+ssh://' + user + '@' + host + ':' + port + '/system'])

def view_real(host, port, real, user):
    subprocess.call(['virt-viewer', '-c', 'qemu+ssh://' + user + '@' + host + ':' + port + '/system', real])

def ssh_target(target, port, user, cmd):
    subprocess.call(['ssh', '-X', '-p', port, user + '@' + target] + cmd)
    
def extend_user(u):
    users = { 'r' : 'root', 'u' : 'ubuntu', 'm' : 'mulisu' }
    try:
        return users[u]
    except KeyError:
        print 'Supported user shortcut:'
        print users
        print
        raise

def default_user():
    return extend_user('r')

def is_host(alias, a):
    return alias[a]['virsh'] == None

def host_real_name(alias, host):
    return alias[host]['real']

def usage(prog):
    print 'usage:', prog, '<command> <args ...>'
    print '''The commands supported are:
    ls      List kvm virtual on a kvm host
    go      Run virsh on a kvm host
    view    Run virt-viewer access a kvm virtual
    ssh     Ssh to ssh server
    alias   Show alias info'''
    print
    print 'Examples:'
    print '   ', prog, 'ls    <host|virtual>'
    print '   ', prog, 'go    <host|virtual>'
    print '   ', prog, 'view  <virtual>'
    print '   ', prog, 'ssh   <host|virtual> <user>'
    print '   ', prog, 'alias <host|virtual>'

def show_alias(alias):
    print 'Supported host shortcut:'
    al = sorted([a for a in alias.keys() if is_host(alias, a)])
    for i in range(0, len(al), 7):
        print al[i : i+7]

    print
    print 'Supported virtual shortcut:'
    al = sorted([a for a in alias.keys() if not is_host(alias, a)])
    for i in range(0, len(al), 7):
        print al[i : i+7]

def main():
    alias = Alias(alias_list)

    q = collections.deque(sys.argv)
    prog = os.path.basename(q.popleft())

    try:
        cmd = q.popleft()
        a = q.popleft()
        if cmd == 'ls':
            h = alias[a]['host']
            ls_host(host_real_name(alias, alias[a]['host']), alias[h]['port'], default_user())
        elif cmd == 'go':
            h = alias[a]['host']
            go_host(host_real_name(alias, alias[a]['host']), alias[h]['port'], default_user())
        elif cmd == 'view':
            h = alias[a]['host']
            # host doesn't support command 'view'
            if is_host(alias, a):
                raise IndexError
            view_real(host_real_name(alias, alias[a]['host']), alias[h]['port'], alias[a]['virsh'], default_user())
        elif cmd == 'ssh':
            h = alias[a]['host']
            u = q.popleft()

            cmd = []
            while len(q):
                cmd += [q.popleft()]
            ssh_target(alias[a]['real'], alias[a]['port'], extend_user(u), cmd)
        elif cmd == 'alias':
            aa = alias[a]
            print 'real :', aa['real']
            print 'port :', aa['port']
            print 'host :', aa['host']
            print 'virsh:', aa['virsh']
        else:
            raise IndexError
    except IndexError:
        usage(prog)
    except KeyError:
        show_alias(alias)
    
if __name__ == '__main__':
    main()
